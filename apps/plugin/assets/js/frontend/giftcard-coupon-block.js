/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/frontend/giftcard-coupon-block.ts":
/*!**********************************************!*\
  !*** ./ts/frontend/giftcard-coupon-block.ts ***!
  \**********************************************/
/***/ (function() {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Add a logging utility with level control\nconst LogLevel = {\n    NONE: 0,\n    ERROR: 1,\n    WARN: 2,\n    INFO: 3,\n    DEBUG: 4,\n};\n// Set the current log level (can be changed for production vs development)\nconst currentLogLevel = LogLevel.ERROR; // Change to ERROR for production, DEBUG for development\nfunction log(level, ...args) {\n    if (level <= currentLogLevel) {\n        switch (level) {\n            case LogLevel.ERROR:\n                console.error(...args);\n                break;\n            case LogLevel.WARN:\n                console.warn(...args);\n                break;\n            case LogLevel.INFO:\n                console.info(...args);\n                break;\n            case LogLevel.DEBUG:\n                console.log(...args);\n                break;\n        }\n    }\n}\n// Helper function to check gift card balance\nfunction checkGiftcardBalance(couponCode) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const formData = new FormData();\n            formData.append(\"action\", \"leat_check_giftcard_balance\");\n            formData.append(\"coupon_code\", couponCode);\n            formData.append(\"nonce\", window.leatGiftCardConfig.nonce);\n            const response = yield fetch(window.leatGiftCardConfig.ajaxUrl, {\n                method: \"POST\",\n                body: formData,\n            });\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error(\"Error checking gift card balance\", error);\n            return { success: false };\n        }\n    });\n}\n// Wait for DOM to be ready\nfunction waitForElement(selector, callback, maxAttempts = 50) {\n    let attempts = 0;\n    const checkExistence = () => {\n        attempts++;\n        if (document.querySelector(selector)) {\n            callback();\n            return true;\n        }\n        else if (attempts < maxAttempts) {\n            setTimeout(checkExistence, 100);\n            return false;\n        }\n        console.log(`Element not found after ${maxAttempts} attempts: ${selector}`);\n        return false;\n    };\n    return checkExistence();\n}\n// Keep track of processed coupon codes to avoid duplicates\nconst processedCouponCodes = new Set();\n// Store coupon balance data to persist across re-renders\nconst couponBalanceData = {};\n// Function to process coupon input\nfunction processCouponInput() {\n    waitForElement(\".wc-block-components-totals-coupon__input\", () => {\n        // Processing for the coupon input field in Blocks checkout\n        const couponInputs = document.querySelectorAll(\".wc-block-components-totals-coupon__input\");\n        console.log(\"Found coupon inputs:\", couponInputs.length);\n        couponInputs.forEach((input) => {\n            // Skip if we've already processed this input\n            if (input.dataset.leatProcessed)\n                return;\n            input.dataset.leatProcessed = \"true\";\n            // Create balance display element\n            const balanceEl = document.createElement(\"div\");\n            balanceEl.className = \"leat-giftcard-balance\";\n            // Find the parent container (the form or a wrapper div)\n            const container = input.closest(\".wc-block-components-totals-coupon__content\") ||\n                input.parentNode;\n            container === null || container === void 0 ? void 0 : container.appendChild(balanceEl);\n            // Add input handler with debounce\n            let timer;\n            input.addEventListener(\"input\", (e) => {\n                const target = e.target;\n                const couponCode = target.value.trim();\n                clearTimeout(timer);\n                // Hide balance display if input is empty\n                if (couponCode === \"\") {\n                    balanceEl.style.display = \"none\";\n                    return;\n                }\n                // Only proceed if coupon code is at least 9 characters (gift card length)\n                if (couponCode.length >= 9) {\n                    // Debounce the check to avoid too many requests\n                    timer = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                        balanceEl.textContent = window.leatGiftCardConfig.checkingText;\n                        balanceEl.className = \"leat-giftcard-balance\";\n                        balanceEl.style.display = \"block\";\n                        const response = yield checkGiftcardBalance(couponCode);\n                        if (response.success && response.data.is_giftcard) {\n                            balanceEl.innerHTML = `${window.leatGiftCardConfig.balanceText} <strong>${response.data.balance}</strong>`;\n                            balanceEl.className = \"leat-giftcard-balance success\";\n                        }\n                        else {\n                            balanceEl.style.display = \"none\";\n                        }\n                    }), 500);\n                }\n            });\n        });\n        // Check for applied coupons\n        processAppliedCoupons();\n    });\n}\n// Function to process applied coupons\nfunction processAppliedCoupons() {\n    // Reset processed flag on elements on each check\n    document.querySelectorAll(\"[data-leat-processed]\").forEach((el) => {\n        delete el.dataset.leatProcessed;\n    });\n    document.querySelectorAll(\"[data-leat-scanned]\").forEach((el) => {\n        delete el.dataset.leatScanned;\n    });\n    // All possible selectors for applied coupons in different WooCommerce Blocks versions\n    const selectors = [\n        // Coupon list items in the cart/checkout totals\n        \".wc-block-components-totals-discount__coupon-list-item\",\n        // Coupon chips in newer versions\n        \".wc-block-components-chip\",\n        \".wc-block-components-chip--radius-small\",\n        // Applied coupons text\n        \".wc-block-components-totals-discount .wc-block-components-totals-item__description\",\n        // Individual coupon items\n        \".wc-block-components-totals-discount__coupon-list\",\n        // Discount row in checkout\n        \".wc-block-components-totals-discount\",\n        // Cart discount row\n        \".cart-discount\",\n    ];\n    // Check coupon summaries in the totals section\n    waitForElement(\".wc-block-components-totals-item__description\", () => {\n        const couponDescriptions = document.querySelectorAll(\".wc-block-components-totals-discount .wc-block-components-totals-item__description\");\n        log(LogLevel.DEBUG, \"Found coupon descriptions:\", couponDescriptions.length);\n        couponDescriptions.forEach((desc) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            // Skip if we've already processed this element\n            if (desc.dataset.leatProcessed)\n                return;\n            desc.dataset.leatProcessed = \"true\";\n            const text = desc.textContent || \"\";\n            const couponMatch = text.match(/[A-Z0-9]{9}/i);\n            if (couponMatch && couponMatch[0]) {\n                const couponCode = couponMatch[0];\n                // Skip if this coupon code was already processed\n                if (processedCouponCodes.has(couponCode)) {\n                    log(LogLevel.DEBUG, \"Skipping already processed coupon code:\", couponCode);\n                    return;\n                }\n                const response = yield checkGiftcardBalance(couponCode);\n                if (response.success && response.data.is_giftcard) {\n                    // Add to processed list\n                    processedCouponCodes.add(couponCode);\n                    // Create balance element as a sibling to the description\n                    const balanceEl = document.createElement(\"div\");\n                    balanceEl.className = \"leat-giftcard-balance success\";\n                    balanceEl.innerHTML = `<small>${window.leatGiftCardConfig.balanceText}${response.data.balance}</small>`;\n                    balanceEl.dataset.couponCode = couponCode;\n                    (_a = desc.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(balanceEl);\n                }\n            }\n        }));\n    });\n    // Process all possible coupon elements\n    selectors.forEach((selector) => {\n        waitForElement(selector, () => {\n            const couponItems = document.querySelectorAll(selector);\n            log(LogLevel.DEBUG, `Found coupon items with selector ${selector}:`, couponItems.length);\n            couponItems.forEach((item) => __awaiter(this, void 0, void 0, function* () {\n                var _a;\n                // Skip if we've already processed this item\n                if (item.dataset.leatProcessed)\n                    return;\n                item.dataset.leatProcessed = \"true\";\n                const text = item.textContent || \"\";\n                // Look for a 9-character alphanumeric code that could be a gift card\n                const couponMatch = text.match(/[A-Z0-9]{9}/i);\n                if (couponMatch && couponMatch[0]) {\n                    const couponCode = couponMatch[0];\n                    log(LogLevel.DEBUG, \"Found potential gift card coupon:\", couponCode);\n                    // Skip if this coupon code was already processed\n                    if (processedCouponCodes.has(couponCode)) {\n                        log(LogLevel.DEBUG, \"Skipping already processed coupon code:\", couponCode);\n                        return;\n                    }\n                    // Check if a balance element for this coupon already exists nearby\n                    // Look in this element and up to 3 levels up\n                    let existingNearby = false;\n                    let parent = item;\n                    for (let i = 0; i < 3; i++) {\n                        if (!parent)\n                            break;\n                        if (parent.querySelector(`.leat-giftcard-balance[data-coupon-code='${couponCode}']`)) {\n                            existingNearby = true;\n                            break;\n                        }\n                        parent = parent.parentElement;\n                    }\n                    if (existingNearby) {\n                        log(LogLevel.DEBUG, \"Balance already displayed nearby for coupon:\", couponCode);\n                        return;\n                    }\n                    const couponEl = document.createElement(\"div\");\n                    couponEl.className = \"leat-giftcard-balance\";\n                    couponEl.textContent = window.leatGiftCardConfig.checkingText;\n                    couponEl.dataset.couponCode = couponCode;\n                    // Add to the item or its parent, depending on the markup\n                    if (item.classList.contains(\"wc-block-components-chip\")) {\n                        // For chip-style coupons, add after the chip\n                        (_a = item.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(couponEl, item.nextSibling);\n                    }\n                    else {\n                        // For other coupon displays, add inside\n                        item.appendChild(couponEl);\n                    }\n                    const response = yield checkGiftcardBalance(couponCode);\n                    if (response.success && response.data.is_giftcard) {\n                        // Store the balance data for persistence\n                        couponBalanceData[couponCode] = response.data.balance;\n                        // Add to processed list\n                        processedCouponCodes.add(couponCode);\n                        couponEl.innerHTML = `<small>${window.leatGiftCardConfig.balanceText}${response.data.balance}</small>`;\n                        couponEl.className = \"leat-giftcard-balance success\";\n                        couponEl.style.display = \"block\";\n                    }\n                    else {\n                        couponEl.style.display = \"none\";\n                    }\n                }\n            }));\n        });\n    });\n    // Look for all text nodes that might contain coupon codes\n    waitForElement(\".wp-block-woocommerce-checkout-totals-block\", () => {\n        const totalsBlock = document.querySelector(\".wp-block-woocommerce-checkout-totals-block\");\n        if (!totalsBlock)\n            return;\n        // Helper function to append balance element - moved UP before first use\n        const appendBalanceElement = (couponCode, balance, containerElement) => {\n            const balanceEl = document.createElement(\"div\");\n            balanceEl.className = \"leat-giftcard-balance success\";\n            balanceEl.innerHTML = `<small>${window.leatGiftCardConfig.balanceText}${balance}</small>`;\n            balanceEl.dataset.couponCode = couponCode;\n            containerElement.appendChild(balanceEl);\n        };\n        // Process a found coupon code\n        const processFoundCouponCode = (couponCode, containerElement) => __awaiter(this, void 0, void 0, function* () {\n            if (!containerElement || containerElement.dataset.leatProcessed)\n                return;\n            containerElement.dataset.leatProcessed = \"true\";\n            log(LogLevel.DEBUG, \"Processing found coupon code:\", couponCode);\n            // Check if a balance element for this coupon already exists nearby in the parent containers\n            // Look up to 3 levels up to find existing balance displays\n            let parent = containerElement;\n            let existingNearby = false;\n            for (let i = 0; i < 3; i++) {\n                if (!parent)\n                    break;\n                if (parent.querySelector(`.leat-giftcard-balance[data-coupon-code='${couponCode}']`)) {\n                    existingNearby = true;\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n            if (existingNearby) {\n                log(LogLevel.DEBUG, \"Balance already displayed nearby for coupon:\", couponCode);\n                return;\n            }\n            // First check if we already have balance data for this coupon\n            if (couponBalanceData[couponCode]) {\n                appendBalanceElement(couponCode, couponBalanceData[couponCode], containerElement);\n                return;\n            }\n            const response = yield checkGiftcardBalance(couponCode);\n            if (response.success && response.data.is_giftcard) {\n                // Store the balance data for persistence\n                couponBalanceData[couponCode] = response.data.balance;\n                // Add to processed list\n                processedCouponCodes.add(couponCode);\n                appendBalanceElement(couponCode, response.data.balance, containerElement);\n            }\n        });\n        // Find all text nodes in the totals section\n        const findCouponCodesInTextNodes = (element) => {\n            if (element.nodeType === 3) {\n                // Text node\n                const text = element.textContent || \"\";\n                const couponMatch = text.match(/[A-Z0-9]{9}/i);\n                if (couponMatch && couponMatch[0]) {\n                    const couponCode = couponMatch[0];\n                    // Check if this node's parent already has a balance element\n                    if (element.parentNode &&\n                        !element.parentNode.querySelector(\".leat-giftcard-balance\")) {\n                        processFoundCouponCode(couponCode, element.parentNode);\n                    }\n                }\n            }\n            else if (element.nodeType === 1) {\n                // Element node\n                // Skip if we've already processed this element\n                if (element.dataset.leatScanned)\n                    return;\n                element.dataset.leatScanned = \"true\";\n                // Process child nodes\n                for (let i = 0; i < element.childNodes.length; i++) {\n                    findCouponCodesInTextNodes(element.childNodes[i]);\n                }\n            }\n        };\n        findCouponCodesInTextNodes(totalsBlock);\n    });\n    // Specific targeting for checkout page\n    if (document.querySelector(\".wp-block-woocommerce-checkout\")) {\n        const addBalanceToAllDiscountRows = () => {\n            // Target the discount rows directly\n            const discountRows = document.querySelectorAll(\".wc-block-components-totals-discount\");\n            discountRows.forEach((row) => {\n                // Skip row if it already has a gift card balance element\n                if (row.querySelector(\".leat-giftcard-balance\")) {\n                    return;\n                }\n                // Look for gift card codes in this row\n                const rowText = row.textContent || \"\";\n                const matches = rowText.match(/[A-Z0-9]{9}/gi) || [];\n                // Only process the first match in each row to avoid duplicates\n                if (matches.length > 0) {\n                    const couponCode = matches[0];\n                    // Check if this row or any parent already has a balance display\n                    let existingNearby = false;\n                    let parent = row;\n                    for (let i = 0; i < 3; i++) {\n                        if (!parent)\n                            break;\n                        if (parent.querySelector(`.leat-giftcard-balance[data-coupon-code='${couponCode}']`)) {\n                            existingNearby = true;\n                            break;\n                        }\n                        parent = parent.parentElement;\n                    }\n                    if (existingNearby) {\n                        return;\n                    }\n                    // If we have balance data for this coupon, add it\n                    if (couponBalanceData[couponCode]) {\n                        const descriptionEl = row.querySelector(\".wc-block-components-totals-item__description\") ||\n                            row;\n                        const balanceEl = document.createElement(\"div\");\n                        balanceEl.className = \"leat-giftcard-balance success\";\n                        balanceEl.innerHTML = `<small>${window.leatGiftCardConfig.balanceText}${couponBalanceData[couponCode]}</small>`;\n                        balanceEl.dataset.couponCode = couponCode;\n                        balanceEl.style.position = \"relative\";\n                        balanceEl.style.zIndex = \"10\";\n                        descriptionEl.appendChild(balanceEl);\n                    }\n                }\n            });\n        };\n        // Run this more aggressively\n        addBalanceToAllDiscountRows();\n        // Set a separate interval just for the checkout page\n        if (!window.leatCheckoutInterval) {\n            window.leatCheckoutInterval = setInterval(() => {\n                addBalanceToAllDiscountRows();\n            }, 500);\n            // Stop after 2 minutes\n            setTimeout(() => {\n                if (window.leatCheckoutInterval) {\n                    clearInterval(window.leatCheckoutInterval);\n                    window.leatCheckoutInterval = null;\n                }\n            }, 120000);\n        }\n    }\n}\n// Initialize the gift card coupon functionality\nfunction initGiftCardCoupon() {\n    log(LogLevel.INFO, \"Leat Gift Card Coupon script loaded\");\n    processCouponInput();\n    processAppliedCoupons();\n    // Set up an intersection observer to detect when coupon elements enter the viewport\n    const intersectionObserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                // Use a small delay to let the DOM settle\n                setTimeout(() => {\n                    processCouponInput();\n                    processAppliedCoupons();\n                }, 100);\n            }\n        });\n    }, {\n        root: null, // observe relative to the viewport\n        threshold: 0.1, // trigger when at least 10% of the element is visible\n    });\n    // Observe the main cart/checkout containers\n    const containers = [\n        \".wp-block-woocommerce-checkout\",\n        \".wp-block-woocommerce-cart\",\n        \".woocommerce-checkout\",\n        \".woocommerce-cart-form\",\n    ];\n    containers.forEach((selector) => {\n        const element = document.querySelector(selector);\n        if (element)\n            intersectionObserver.observe(element);\n    });\n    // Also set up a mutation observer as a fallback for dynamic content\n    const mutationObserver = new MutationObserver((mutations) => {\n        // Use a small delay to let the DOM settle after changes\n        setTimeout(() => {\n            processCouponInput();\n            processAppliedCoupons();\n            // Re-observe any new checkout/cart containers\n            containers.forEach((selector) => {\n                document.querySelectorAll(selector).forEach((element) => {\n                    if (element)\n                        intersectionObserver.observe(element);\n                });\n            });\n        }, 100);\n    });\n    // Start observing the document with configured parameters\n    mutationObserver.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n    // Additionally, check for applied coupons every second for the first 15 seconds\n    // This is a fallback in case observers miss something\n    let checkCount = 0;\n    const intervalId = setInterval(() => {\n        checkCount++;\n        processAppliedCoupons();\n        if (checkCount >= 15) {\n            clearInterval(intervalId);\n        }\n    }, 1000);\n    // Also check for applied coupons when checkout/cart updates\n    if (typeof jQuery === \"function\") {\n        jQuery(document.body).on(\"updated_checkout updated_cart_totals payment_method_selected updated_shipping_method applied_coupon removed_coupon\", () => {\n            console.log(\"WooCommerce update event detected, checking gift card balances\");\n            setTimeout(processAppliedCoupons, 300);\n        });\n    }\n    // Extra check when blocks checkout components update\n    try {\n        if (wp && wp.data && wp.data.subscribe) {\n            wp.data.subscribe(() => {\n                // Check if we're on a page with checkout blocks\n                if (document.querySelector(\".wp-block-woocommerce-checkout\")) {\n                    // Check gift card balances on any store update\n                    setTimeout(processAppliedCoupons, 300);\n                }\n            });\n        }\n    }\n    catch (e) {\n        console.error(\"Failed to subscribe to block store updates:\", e);\n    }\n}\n// Run on page load\ndocument.addEventListener(\"DOMContentLoaded\", initGiftCardCoupon);\n\n\n//# sourceURL=webpack://@leat/plugin/./ts/frontend/giftcard-coupon-block.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./ts/frontend/giftcard-coupon-block.ts"]();
/******/ 	
/******/ })()
;